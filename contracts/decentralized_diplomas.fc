#include "imports/stdlib.fc";

;; storage variables
global cell diplomas_map;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    diplomas_map = ds~load_dict();

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_dict(diplomas_map)
            .end_cell()
    );
}


cell create_diploma(slice giver_addr, slice achievement_str) {
    ;; since diplomas are stored in a dict, who got it is already obvious from the key
    return begin_cell()
        .store_ref(begin_cell().store_slice(giver_addr).end_cell())
        .store_uint(now(), 64)
        .store_slice(achievement_str) ;; this is stored as a string tail, order matters!
        .end_cell();
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op

    if (op == 1) { ;; operation 1 --- issue a diploma, the only supported operation
        int user_id = in_msg_body~load_uint(256);
        slice achievement_str = in_msg_body; ;; the rest is a stored string

        cell diploma = create_diploma(sender_address, achievement_str);

        var (user_diplomas_list, found) = diplomas_map.udict_get?(256, user_id);

        builder new_link_builder = begin_cell().store_ref(diploma);
        if (found) {
            new_link_builder = new_link_builder.store_ref(user_diplomas_list~load_ref());
        }

        cell new_link = new_link_builder.end_cell();

        ;; only reference to diploma is stored inside a dict
        diplomas_map~udict_set_ref(256, user_id, new_link);
        save_data();

        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

cell get_diploma(int target_user_id) method_id {
    load_data();
    var (user_diplomas_list, found) =
        diplomas_map.udict_get?(256, target_user_id);

    if (found) {
        return user_diplomas_list~load_ref();
    }

    return null();
}
