#include "imports/stdlib.fc";

;; storage variables
global cell diplomas_map;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    diplomas_map = ds~load_dict();

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_dict(diplomas_map)
            .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op

    if (op == 1) {
        int user_id = in_msg_body~load_uint(64);
        int value = in_msg_body~load_uint(64);

        var value_slice = begin_cell()
            .store_uint(value, 64)
            .end_cell().begin_parse();

        diplomas_map = diplomas_map.udict_set(64, user_id, value_slice);
        save_data();

        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

int get_diploma() method_id {
    load_data();
    var (user_diplomas_list, found) =
        diplomas_map.udict_get?(64, 1);

    int result = user_diplomas_list~load_uint(64); 
    return result;
}
